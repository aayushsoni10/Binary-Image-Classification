# -*- coding: utf-8 -*-
"""Binary_Image_classification_training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mt_sGP1GwTggIf0aTOpo5Gw7PRjt0P0
"""

import pandas as pd
import numpy as np
from keras.layers import Conv2D , MaxPooling2D , Dense, Flatten , Input , Dropout
from keras.models import Sequential , Model
import keras
import tensorflow as tf
from PIL import Image
from keras.models import model_from_json
import os
from keras.preprocessing.image import ImageDataGenerator
from keras import utils as np_utils  
from matplotlib import image

!sed -i 1d train_mappings_final.csv #should be executed only once
df = pd.read_csv('train_mappings_final.csv')
df

df = pd.read_csv('train_mappings_final.csv')
s = df['File Name']

images = []
for i in range(len(s)):	
    loc = r'/content/final_train/final_train/'+str(s[i][19:])
    img1 = Image.open(loc)
    img1 = img1.resize((192,192), Image.BICUBIC)
    nx , ny = img1.size
    img = np.asarray(img1.resize((int(nx*1),int(ny*1)),Image.BICUBIC))
    images.append(img)
    img1.close()
    
X = np.asarray(images)
del images
X = X/255.0
print(X.shape)

Y = np.asarray(df['Class'])
Y = np.reshape(Y, (Y.shape[0], 1))
model = Sequential()

model.add(Conv2D(32, 3, 3, border_mode='same', input_shape=(192, 192, 3), activation='relu'))
model.add(Conv2D(32, 3, 3, border_mode='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, 3, 3, border_mode='same', activation='relu'))
model.add(Conv2D(64, 3, 3, border_mode='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, 3, 3, border_mode='same', activation='relu'))
model.add(Conv2D(128, 3, 3, border_mode='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(256, 3, 3, border_mode='same', activation='relu'))
model.add(Conv2D(256, 3, 3, border_mode='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dropout(0.25))

model.add(Dense(256, activation='relu'))
model.add(Dropout(0.25))

model.add(Dense(1, activation='sigmoid'))
    
model.compile(loss = 'binary_crossentropy' , optimizer = 'adam' , metrics = ['accuracy'])
model.fit(X , Y , batch_size = 128 , epochs = 30 , validation_split = 0)
print(model.summary())

model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
model.save_weights("model_2016A7PS0720G.h5")
print("Saved model to disk")